/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Vista;
import Controlador.ProductoControlador;
import Controlador.CategoriaControlador;
import Modelo.Producto;
import Modelo.Categoria;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kreiv
 */
public class VistaProductos extends javax.swing.JPanel {
    private final ProductoControlador productoControlador;
private Integer idProductoSeleccionado = null;

private final CategoriaControlador categoriaControlador;
private Integer idCategoriaSeleccionada = null;

    /**
     * Creates new form VistaProductos
     */
    public VistaProductos() {
        initComponents();
        this.productoControlador = new ProductoControlador();
        this.categoriaControlador = new CategoriaControlador();
        cargarDatosTabla();
        cargarCategorias();
        eventoComboCategorias();
    }
    
    private void limpiar(){
        TextNombreProducto.setText("");
        TextDescripcionProducto.setText("");
        TextPrecioUnitario.setText("");
        TextStock.setText("");
        TextImagen.setText("");
        TextBuscar.setText("");
        idProductoSeleccionado = null;
        btnEliminar.setEnabled(true);
        btnGuardar.setEnabled(true);
    }

    private void cargarDatosTabla() {
        List<Producto> productos = productoControlador.obtenerTodosProductos();
        if (productos != null) {
            DefaultTableModel model = (DefaultTableModel) TablaProductos.getModel();
            model.setRowCount(0);
            for (Producto pro : productos) {
                Object[] row = {
                    pro.getIdProducto(),
                    pro.getNombreProducto(),
                    pro.getDescripcionProducto(),
                    pro.getIdCategoria(),
                    pro.getPrecioUnitario(),
                    pro.getStock(),
                    pro.getImagen()
                };
                model.addRow(row);
            }
        }
    }
    
    private void eventoComboCategorias(){
        ComboCategorias.addActionListener(e-> {
            int indiceSeleccionado = ComboCategorias.getSelectedIndex();
            if (indiceSeleccionado>= 0){
                try{
                    List<Categoria> categorias = categoriaControlador.obtenerTodasCategorias();
                    Categoria categoriaSelecionada = categorias.get(indiceSeleccionado);
                    idCategoriaSeleccionada = categoriaSelecionada.getIdCategoria();
                    System.out.println("ID de la categoria seleccionada:"+ idCategoriaSeleccionada);
                }catch(Exception ex){
                   JOptionPane.showMessageDialog(this, "Error al seleccionar categoria:"+ ex.getMessage());
                }
            }
        });
    }
    
    private void seleccionarCategoriaEnCombio(Integer idCategoria){
        try{
            List<Categoria> categorias = categoriaControlador.obtenerTodasCategorias();
            
            for (int i = 0; i < categorias.size(); i++){
                Categoria categoria = categorias.get(i);
                if(categoria.getIdCategoria() == idCategoria){
                    ComboCategorias.setSelectedIndex(i);
                    break;
                }
            }
        }catch (Exception e ){
            JOptionPane.showMessageDialog(this, "Error al seleccionar categoria:"+ e.getMessage());
        }
    }
   
    private void cargarCategorias() {
        try {
// Obtener las categorías desde el controlador
            List<Categoria> categorias
                    = categoriaControlador.obtenerTodasCategorias();
// Limpiar el combo box por si tiene datos
            ComboCategorias.removeAllItems();
// Agregar cada categoría al combo box
            for (Categoria cat : categorias) {
                ComboCategorias.addItem(cat.getNombreCategoria());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Error al cargar las categorías: " + e.getMessage());
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        TextNombreProducto = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        TextDescripcionProducto = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        TextPrecioUnitario = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        TextStock = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        TextImagen = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        TextBuscar = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaProductos = new javax.swing.JTable();
        ComboCategorias = new javax.swing.JComboBox<>();
        btnLimpiar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();

        jLabel1.setText("Nombre");

        jLabel2.setText("Descripcion");

        jLabel3.setText("Categoria");

        jLabel4.setText("Precio Unitario");

        jLabel5.setText("Stock");

        jLabel6.setText("Imagen");

        jLabel7.setText("Buscar");

        TextBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textBuscarkeyTyped(evt);
            }
        });

        TablaProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID Empleado", "Nombre", "Descripcion", "ID Categoria", "Precio", "Stock", "Imagen"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TablaProductos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaProductoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TablaProductos);

        ComboCategorias.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ComboCategorias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventoComboCategorias(evt);
            }
        });

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accionBotonLimpiar(evt);
            }
        });

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accionBotonGuardar(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accionBotonEliminar(evt);
            }
        });

        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accionBotonActualizar(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(TextBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(btnLimpiar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnGuardar)
                                .addGap(29, 29, 29)
                                .addComponent(btnEliminar)
                                .addGap(30, 30, 30)
                                .addComponent(btnActualizar))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(TextNombreProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addComponent(jLabel2))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(TextDescripcionProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(ComboCategorias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(59, 59, 59)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(TextPrecioUnitario, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(TextStock, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(TextImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(22, 22, 22))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TextNombreProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextDescripcionProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextPrecioUnitario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextImagen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComboCategorias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TextBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLimpiar)
                    .addComponent(btnGuardar)
                    .addComponent(btnEliminar)
                    .addComponent(btnActualizar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void accionBotonGuardar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accionBotonGuardar
        // TODO add your handling code here:
        String nombreProducto = TextNombreProducto.getText();
        String descripcionProducto = TextDescripcionProducto.getText();
        int idCategoria = idCategoriaSeleccionada;
        float precioUnitario = Float.parseFloat(TextPrecioUnitario.getText());
        int stock = Integer.parseInt(TextStock.getText());
        String imagen = TextImagen.getText();
        
        if(!nombreProducto.isEmpty()&&
                !descripcionProducto.isEmpty()&&
                precioUnitario >= 0 &&
                stock >= 0){
            try{
                productoControlador.crearProducto(
                        nombreProducto,
                        descripcionProducto,
                        idCategoria,
                        precioUnitario,
                        stock,
                        imagen);
                limpiar();
                cargarDatosTabla();
                cargarCategorias();
                eventoComboCategorias();
            }catch(Exception e){
                javax.swing.JOptionPane.showMessageDialog(this, "Error en los datos:" + e.getMessage(),
                        "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }else{
            javax.swing.JOptionPane.showMessageDialog(this, "Pro favor, llene todos los campos obligatorios correctamente.","Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_accionBotonGuardar

    private void accionBotonEliminar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accionBotonEliminar
        // TODO add your handling code here:
        int filaSeleccionada = TablaProductos.getSelectedRow();
        if(filaSeleccionada != -1){
            int idProducto = (int) TablaProductos.getValueAt(filaSeleccionada, 0);
            productoControlador.eliminarProducto(idProducto);
            cargarDatosTabla();
        }else{
            javax.swing.JOptionPane.showMessageDialog(this, "Selecciona una fila para eliminar.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_accionBotonEliminar

    private void eventoComboCategorias(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventoComboCategorias
        // TODO add your handling code here:
    }//GEN-LAST:event_eventoComboCategorias

    private void tablaProductoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaProductoMouseClicked
        // TODO add your handling code here:
        if(evt.getClickCount() ==2){
            int filaSeleccionada = TablaProductos.getSelectedRow();
            if(filaSeleccionada != -1){
                DefaultTableModel model = (DefaultTableModel) TablaProductos.getModel();
                
                idProductoSeleccionado = (Integer) model.getValueAt(filaSeleccionada, 0);
                String nombreProducto = (String) model.getValueAt(filaSeleccionada, 1);
                String decripcionProducto = (String) model.getValueAt(filaSeleccionada, 2);
                Integer idCategoria = (Integer) model.getValueAt(filaSeleccionada, 3);
                Float precioUnitario = (Float) model.getValueAt(filaSeleccionada, 4);
                Integer stock = (Integer) model.getValueAt(filaSeleccionada, 5);
                String imagen = (String) model.getValueAt(filaSeleccionada, 6);
                
                TextNombreProducto.setText(nombreProducto);
                TextDescripcionProducto.setText(decripcionProducto);
                TextPrecioUnitario.setText(precioUnitario.toString());
                TextStock.setText(stock.toString());
                TextImagen.setText(imagen);
                
                seleccionarCategoriaEnCombio(idCategoria);
                idCategoriaSeleccionada = idCategoria;
                
                btnEliminar.setEnabled(false);
                btnGuardar.setEnabled(false);
            }
        }
    }//GEN-LAST:event_tablaProductoMouseClicked

    private void accionBotonActualizar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accionBotonActualizar
        // TODO add your handling code here:
        String nombreProducto = TextNombreProducto.getText();
        String descripcionProducto = TextDescripcionProducto.getText();
        int idCategoria = idCategoriaSeleccionada;
        float precioUnitario = Float.parseFloat(TextPrecioUnitario.getText());
        int stock = Integer.parseInt(TextStock.getText());
        String imagen = TextImagen.getText();
        
        if(idProductoSeleccionado != null &&
                !nombreProducto.isEmpty() &&
                !descripcionProducto.isEmpty()&&
                idCategoria >= 0 &&
                stock >= 0){
            
            try{
                productoControlador.actualizarProducto(idProductoSeleccionado,
                        nombreProducto,
                        descripcionProducto,
                        idCategoria,
                        precioUnitario,
                        stock,
                        imagen);
                cargarDatosTabla();
                limpiar();
            }catch(Exception e){
                javax.swing.JOptionPane.showMessageDialog(this, "Error en los datos:"+ e.getMessage(),
                        "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }else{
            javax.swing.JOptionPane.showMessageDialog(this, "Por favor, llene todos los camposobligatorios.",
                    "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_accionBotonActualizar

    private void textBuscarkeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textBuscarkeyTyped
        // TODO add your handling code here:
        String TextBusqueda = TextBuscar.getText().trim().toLowerCase();
        List<Producto> productos = productoControlador.obtenerTodosProductos();
        
        DefaultTableModel modelo = (DefaultTableModel) TablaProductos.getModel();
        modelo.setRowCount(0);
        
        if(productos != null){
            for(Producto pro: productos){
                if(TextBusqueda.isEmpty()
                        || pro.getNombreProducto().toLowerCase().contains(TextBusqueda)
                        || pro.getDescripcionProducto().toLowerCase().contains(TextBusqueda)
                        || String.valueOf(pro.getIdCategoria()).contains(TextBusqueda)
                        || String.valueOf(pro.getPrecioUnitario()).contains(TextBusqueda)
                        || String.valueOf(pro.getStock()).contains(TextBusqueda)){
                    Object[] fila ={
                        pro.getIdProducto(),
                        pro.getNombreProducto(),
                        pro.getDescripcionProducto(),
                        pro.getIdCategoria(),
                        pro.getPrecioUnitario(),
                        pro.getStock(),
                        pro.getImagen()
                    };
                    modelo.addRow(fila);
                }
            }
        }
    }//GEN-LAST:event_textBuscarkeyTyped

    private void accionBotonLimpiar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accionBotonLimpiar
        // TODO add your handling code here:
        limpiar();
    }//GEN-LAST:event_accionBotonLimpiar


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboCategorias;
    private javax.swing.JTable TablaProductos;
    private javax.swing.JTextField TextBuscar;
    private javax.swing.JTextField TextDescripcionProducto;
    private javax.swing.JTextField TextImagen;
    private javax.swing.JTextField TextNombreProducto;
    private javax.swing.JTextField TextPrecioUnitario;
    private javax.swing.JTextField TextStock;
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
